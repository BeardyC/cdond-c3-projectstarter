version: 2.1
node-base: &node-base
  docker:
    - image: circleci/node:13.8.0
aws-base: &aws-base
  docker:
    - image: amazon/aws-cli
ansible-base: &ansible-base
  docker:
    - image: python:3.7-alpine3.11

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-end-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name front-end-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    <<: *node-base
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
  
    <<: *node-base
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm install && npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node-base
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
            cd frontend && npm i && npm run test
                
  test-backend:
    <<: *node-base
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-End
          command: |
            cd backend && npm i && npm run test
            
  scan-frontend:
    <<: *node-base
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit packages
          command: |
            cd frontend && npm audit fix --audit-level=critical

  scan-backend:
    <<: *node-base
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit packages
          command: |
            cd backend && npm audit fix --audit-level=critical

  deploy-infrastructure:
    <<: *aws-base
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=back-end-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name back-end-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Project=front-end-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name front-end-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run: 
          name: Populate memstash with back-end IP
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${CIRCLE_WORKFLOW_ID}
            echo ${BACKEND_IP}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           echo [web] > .circleci/ansible/inventory.txt
           aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --filters "Name=tag:Project,Values=back-end-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt
           cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    <<: *ansible-base
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fc:9a:a5:f0:bb:74:6a:59:ae:ba:f7:1d:55:24:22:08"
      - attach_workspace:
          at: ~/
      - run:
          name: Install deps
          command: |
            apk add --update ansible 
            pip install awscli
      - run:
          name: Configure server
          command: |
            cat \<< EOF > ~/project/backend/.env
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            EOF
            cat ~/project/backend/.env
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  run-migrations:
    <<: *node-base
    steps:
      - checkout
      - run:
          name: Install deps
          command: sudo apt-get update && sudo apt-get install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            pwd
            npm install && && run migrations >> out.txt
            cat out.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep "executed successfully" out.txt
            then
              echo "successfully migrated"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT \
                --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "failed migration"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT \
                --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     

  deploy-frontend:
    <<: *aws-base
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install node && cd frontend && npm install
      - run:
          name: Get backend url
          command: |
            cd frontend
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]